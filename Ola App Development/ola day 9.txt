
	autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {
	            @Override
	            public void onPlaceSelected(Place place) {
	                // TODO: Get info about the selected place.
	                destination = place.getName().toString();
	                destinationLatLng = place.getLatLng();
	            }
	
	            @Override
	            public void onError(Status status) {
	                // TODO: Handle the error.
	                Log.i("Places", "An error occurred: " + status);
	            }
	        });

	HashMap map = new HashMap();
	                    map.put("customerRideId", customerId);
	                    map.put("destinationLat", destinationLatLng.latitude);
	                    map.put("destinationLng", destinationLatLng.longitude);
	                    driverRef.updateChildren(map);

	geoQuery.addGeoQueryEventListener(new GeoQueryEventListener() {
	            @Override
	            public void onKeyEntered(String key, GeoLocation location) {

	Add it inside this method

	In Customer Map

	getAssignedCustomerPickupLocation();
	                    getAssignedCustomerDestination();

	private void getAssignedCustomerDestination(){
	        String driverId = FirebaseAuth.getInstance().getCurrentUser().getUid();
	        DatabaseReference assignedCustomerRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverId).child("customerRequest");
	        assignedCustomerRef.addListenerForSingleValueEvent(new ValueEventListener() {
	            @Override
	            public void onDataChange(DataSnapshot dataSnapshot) {
	                if(dataSnapshot.exists()) {
	                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();
	                    if(map.get("destination")!=null){
	                        destination = map.get("destination").toString();
	                        customerDestination.setText("Destination: " + destination);
	                    }
	                    else{
	                        customerDestination.setText("Destination: --");
	                    }

	Double destinationLat = 0.0;
	                    Double destinationLng = 0.0;
	                    if(map.get("destinationLat") != null){
	                        destinationLat = Double.valueOf(map.get("destinationLat").toString());
	                    }
	                    if(map.get("destinationLng") != null){
	                        destinationLng = Double.valueOf(map.get("destinationLng").toString());
	                        destinationLatLng = new LatLng(destinationLat, destinationLng);
	                    }
	
	                }
	            }
	
	            @Override
	            public void onCancelled(DatabaseError databaseError) {
	            }
	        });
	    }

	In DriverMapActivity




 getAssignedCustomerDestination();
                    getAssignedCustomerInfo();
In getAssignedCustomer
 private void getAssignedCustomerInfo(){
        customerInfo.setVisibility(View.VISIBLE);
        DatabaseReference mCustomerDatabase = FirebaseDatabase.getInstance().getReference().child("Users").child("Customers").child(customerId);
        mCustomerDatabase.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if(dataSnapshot.exists() && dataSnapshot.getChildrenCount()>0){
                    Map<String, Object> map = (Map<String, Object>) dataSnapshot.getValue();
                    if(map.get("name")!=null){
                        customerName.setText(map.get("name").toString());
                    }

 if(map.get("phone")!=null){
                        customerPhone.setText(map.get("phone").toString());
                    }
                    if(map.get("profileImageUrl")!=null){
                        Glide.with(getApplication()).load(map.get("profileImageUrl").toString()).into(customerProfileImage);
                    }
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });
    } <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/customerInfo"
        android:layout_gravity="bottom"
        android:orientation="vertical"
        android:background="@android:color/white"
        android:visibility="visible"
        android:elevation="1dp"
        android:translationZ="1dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">
            <ImageView
                android:layout_width="100sp"
                android:layout_height="100sp"
                android:id="@+id/customerProfileImage"
                android:src="@drawable/ic_default_user"
                android:padding="20sp"/>
<LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:paddingLeft="40sp">
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:id="@+id/customerDestination"
                    android:paddingBottom="10sp"
                    android:text="Destination: --"/>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:id="@+id/customerName"
                    android:paddingBottom="10sp"
                    android:paddingTop="20sp"/>
 <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:id="@+id/customerPhone"
                    android:paddingBottom="10sp"
                    android:paddingTop="20sp"/>
            </LinearLayout>
        </LinearLayout>
 https://github.com/jd-alexander/Google-Directions-Android
 https://console.cloud.google.com/apis/library/directions-backend.googleapis.com?authuser=1&project=taxiapp-35781
 implementation 'com.github.jd-alexander:library:1.1.0'


public class DriverMapActivity extends FragmentActivity implements OnMapReadyCallback,  RoutingListener {

	pickupMarker = mMap.addMarker(new MarkerOptions().position(pickupLatLng).title("pickup location").icon(BitmapDescriptorFactory.fromResource(R.drawable.ic_pickup)));
	                    getRouteToMarker(pickupLatLng);

	In getAssignedCustomerPickupLocation

	private void getRouteToMarker(LatLng pickupLatLng) {
	        if (pickupLatLng != null && mlocation != null){
	            Routing routing = new Routing.Builder()
	                    .travelMode(AbstractRouting.TravelMode.DRIVING)
	                    .withListener(this)
	                    .alternativeRoutes(false)
	                    .waypoints(new LatLng(mlocation.getLatitude(), mlocation.getLongitude()), pickupLatLng)
	                    .build();
	            routing.execute();
	        }
	    }

	private List<Polyline> polylines;
	    private static final int[] COLORS = new int[]{R.color.primary_dark_material_light};
	    @Override
	    public void onRoutingFailure(RouteException e) {
	        if(e != null) {
	            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
	        }else {
	            Toast.makeText(this, "Something went wrong, Try again", Toast.LENGTH_SHORT).show();
	        }
	    }

	@Override
	    public void onRoutingSuccess(ArrayList<Route> route, int shortestRouteIndex) {
	        if(polylines.size()>0) {
	            for (Polyline poly : polylines) {
	                poly.remove();
	            }
	        }
	
	        polylines = new ArrayList<>();
	        //add route(s) to the map
	        for (int i = 0; i <route.size(); i++) {
	
	            //In case of more than 5 alternative routes
	            int colorIndex = i % COLORS.length;

	PolylineOptions polyOptions = new PolylineOptions();
	            polyOptions.color(getResources().getColor(COLORS[colorIndex]));
	            polyOptions.width(10 + i * 3);
	            polyOptions.addAll(route.get(i).getPoints());
	            Polyline polyline = mMap.addPolyline(polyOptions);
	            polylines.add(polyline);
	
	            Toast.makeText(getApplicationContext(),"Route "+ (i+1) +": distance - "+ route.get(i).getDistanceValue()+": duration - "+ route.get(i).getDurationValue(),Toast.LENGTH_SHORT).show();
	        }
	    }

	private void erasePolylines(){
	        for(Polyline line : polylines){
	            line.remove();
	        }
	        polylines.clear();
	    }

	private void endRide(){
	        rideStatus.setText("picked customer");
	        erasePolylines();
	
	        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
	        DatabaseReference driverRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(userId).child("customerRequest");
	        driverRef.removeValue();
	
	        DatabaseReference ref = FirebaseDatabase.getInstance().getReference("customerRequest");
	        GeoFire geoFire = new GeoFire(ref);
	        geoFire.removeLocation(customerId);
	        customerId="";
	        rideDistance = 0;
	
	        if(pickupMarker != null){
	            pickupMarker.remove();
	        }
	        if (assignedCustomerPickupLocationRefListener != null){
	            assignedCustomerPickupLocationRef.removeEventListener(assignedCustomerPickupLocationRefListener);
	        }

	customerInfo.setVisibility(View.GONE);
	        customerName.setText("");
	        customerPhone.setText("");
	        customerDestination.setText("Destination: --");
	        customerProfileImage.setImageResource(R.mipmap.ic_user);
	    }

	<Button
	            android:layout_width="match_parent"
	            android:layout_height="wrap_content"
	            android:text="picked customer"
	            android:id="@+id/rideStatus"/>

	if(dataSnapshot.exists()) {
	                    status = 1;
	                    customerId = dataSnapshot.getValue().toString();
	                    getAssignedCustomerPickupLocation();
	                    getAssignedCustomerDestination();
	                    getAssignedCustomerInfo();
	                } else {
	                    endRide();
	                }


getDriverLocation();
	                    getHasRideEnded();

	In getClosestDriver

	private DatabaseReference driveHasEndedRef;
	    private ValueEventListener driveHasEndedRefListener;
	    private void getHasRideEnded(){
	        driveHasEndedRef = FirebaseDatabase.getInstance().getReference().child("Users").child("Drivers").child(driverFoundID).child("customerRequest").child("customerRideId");
	        driveHasEndedRefListener = driveHasEndedRef.addValueEventListener(new ValueEventListener() {
	            @Override
	            public void onDataChange(DataSnapshot dataSnapshot) {
	                if(dataSnapshot.exists()){
	
	                }else{
	                    endRide();
	                }
	            }
	
	            @Override
	            public void onCancelled(DatabaseError databaseError) {
	            }
	        });
	    }
